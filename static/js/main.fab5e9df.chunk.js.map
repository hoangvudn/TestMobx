{"version":3,"sources":["component/InputText.js","component/ButtonTestState.js","component/Task.js","component/TaskList.js","App.js","reportWebVitals.js","component/TimerStore.js","component/TimerView.js","index.js"],"names":["InputText","props","type","onChange","e","console","log","target","value","ButtonTestState","useState","count","setCount","statusInputText","onClick","showInputText","Task","className","name","information","TaskList","status","map","st","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","myTimer","secondsPassed","makeAutoObservable","this","setInterval","increase","observer","timer","reset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAOeA,MALf,SAAmBC,GACf,OACK,uBAAOC,KAAK,OAAOC,SAAU,SAACC,GAAKC,QAAQC,IAAIF,EAAEG,OAAOC,WCgClDC,MAjCf,SAAyBR,GAAQ,IAAD,EACJS,mBAAS,GADL,mBACvBC,EADuB,KAChBC,EADgB,OAEgBF,oBAAS,GAFzB,mBAEvBG,EAFuB,KAiB9B,OAjB8B,KAkB5B,gCACI,6BAAKF,IACP,wBACEG,QAAS,WACPF,EAASD,EAAQ,IAFrB,mBAOA,4BArBkB,WACpB,GAAIE,EACD,OACE,8BACE,cAAC,EAAD,MAiBDE,SCZKC,EAdF,SAACf,GAAD,OACT,sBAAKgB,UAAU,gBAAf,UACI,wCAAWhB,EAAMiB,KAAjB,mBAAuCjB,EAAMkB,eAC7C,cAAC,EAAD,IACA,cAAC,EAAD,QCWOC,EAhBE,SAACnB,GAOd,OACI,sBAAKgB,UAAU,GAAf,UACK,mBAAGA,UAAU,uBAAb,wBARK,CACV,CAACC,KAAK,QAASC,YAAY,eAAgBE,OAAO,SAClD,CAACH,KAAK,QAASC,YAAY,cAAeE,OAAO,SACjD,CAACH,KAAK,OAAQC,YAAY,aAAcE,OAAO,SAC/C,CAACH,KAAK,SAAUC,YAAY,aAAcE,QAAO,IAKrCC,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,CAAML,KAAMK,EAAGL,KAAMC,YAAaI,EAAGJ,qBCUvCK,MAjBf,WAOI,OACA,sBAAKP,UAAU,MAAf,UACG,kDACA,cAAC,EAAD,IACA,kDCNQQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qBCYRQ,EAAU,I,WAbZ,aAAe,yBAFfC,cAAgB,EAGZC,YAAmBC,M,uDAInBA,KAAKF,eAAiB,I,8BAItBE,KAAKF,cAAgB,M,MAK7BG,aAAY,WACRJ,EAAQK,aACT,KACYL,Q,QCZAM,eARG,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACd,sBAAKxB,UAAU,oBAAf,UACK,oDACA,yBAAQA,UAAU,oCAAoCH,QAAS,kBAAM2B,EAAMC,SAA3E,6BAAqGD,EAAMN,uBCGpHQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWJ,MAAOP,OAEpBY,SAASC,eAAe,SAM1BtB,K","file":"static/js/main.fab5e9df.chunk.js","sourcesContent":["import React from \"react\";\r\nimport '../styles/style.scss';\r\nfunction InputText(props) {\r\n    return (\r\n         <input type=\"text\" onChange={(e)=>{console.log(e.target.value)}}/>\r\n    )\r\n}\r\nexport default InputText;","import React, { useState } from \"react\";\r\nimport \"../styles/style.scss\";\r\nimport InputText from './InputText.js';\r\nfunction ButtonTestState(props) {\r\n  const [count, setCount] = useState(0);\r\n  const [statusInputText, setStatusInputText] = useState(false);\r\n \r\n  //----------------------SHOW INPUT TEXT---------------------->>>>>>>>>>\r\n  \r\n  const showInputText = () => {\r\n    if (statusInputText) {\r\n       return (\r\n         <div>\r\n           <InputText />\r\n         </div>\r\n       )\r\n    } else {\r\n      \r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n        <h1>{count}</h1>\r\n      <button\r\n        onClick={() => {\r\n          setCount(count + 1);\r\n        }}\r\n      >\r\n        click\r\n      </button>\r\n      <p>{showInputText()}</p>\r\n    </div>\r\n  );\r\n \r\n}\r\n\r\nexport default ButtonTestState;\r\n","import React from \"react\";\r\nimport '../styles/style.scss';\r\nimport ButtonTestState from './ButtonTestState';\r\nimport InputText from './InputText.js';\r\nconst Task = (props) => (\r\n    <div className=\"containerList\">\r\n        <p> Name: {props.name}.  Information: {props.information}</p>\r\n        <InputText />\r\n        <ButtonTestState />\r\n        {/*<ul className=\"containerList__item\">\r\n            {/*}<li className=\"containerList__list\">{props.ts}</li>\r\n            <li className=\"containerList__list\">{props.ag}</li>\r\n            <li className=\"containerList__list\">Learn Javascript</li>\r\n            <li className=\"containerList__list\">Learn Python</li>*/}\r\n            {/*<li className=\"containerList__list\">{props.name}</li>\r\n        </ul>*/}\r\n    </div>\r\n)\r\nexport default Task;","import React from \"react\";\r\nimport Task from '../component/Task.js';\r\n\r\nconst TaskList = (props) => {\r\n    const staff = [\r\n        {name:'Tommy', information:'handsome boy', status:'false'},\r\n        {name:'David', information:'good person', status:'false'},\r\n        {name:'John', information:'bad person', status:'false'},\r\n        {name:'Comodo', information:'bad person', status:false},\r\n    ]\r\n    return (\r\n        <div className=\"\">\r\n             <p className=\"containerList__title\">TO DO LIST</p>\r\n             {staff.map((st) => (\r\n                 <Task name={st.name} information={st.information}/>\r\n             ))}\r\n        </div>\r\n    )   \r\n}\r\nexport default TaskList;","import './App.scss';\nimport TaskList from './component/TaskList.js';\nimport Task from './component/Task.js';\nimport InputText from './component/InputText.js';\nimport ButtonTestState from './component/ButtonTestState';\nimport './styles/style.scss'\n\nfunction App() {\n  /*render() {*/\n    const staff = [\n        {name:'Tommy', information:'handsome boy'},\n        {name:'David', information:'good person'},\n        {name:'John', information:'bad person'},\n    ]\n    return (\n    <div className=\"App\">\n       <h2>WELCOME TO REACT</h2>\n       <TaskList />\n       <button>CLICK ME</button>\n    </div>\n    );\n /* };*/\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\r\nimport { makeAutoObservable } from \"mobx\"\r\n\r\nclass Timer {\r\n    secondsPassed = 0\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    increase() {\r\n        this.secondsPassed += 1\r\n    }\r\n\r\n    reset() {\r\n        this.secondsPassed = 0\r\n    }\r\n}\r\n\r\nconst myTimer = new Timer()\r\nsetInterval(() => {\r\n    myTimer.increase()\r\n}, 1000)\r\nexport default myTimer;\r\n","import React from \"react\"\r\nimport { observer } from \"mobx-react\";\r\nimport '../styles/style.scss';\r\nconst TimerView = ({ timer }) => (\r\n    <div className=\"containerTestMobx\">\r\n         <h2>TEST MOBX IN REACT</h2>\r\n         <button className=\"containerTestMobx__buttonTestMobx\" onClick={() => timer.reset()}>Seconds passed: {timer.secondsPassed}</button>\r\n    </div>\r\n    \r\n)\r\n\r\nexport default observer(TimerView);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport myTimer from './component/TimerStore.js';\nimport TimerView from './component/TimerView.js';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <TimerView timer={myTimer} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}