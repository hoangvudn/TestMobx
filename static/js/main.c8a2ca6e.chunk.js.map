{"version":3,"sources":["component/ButtonTestState.js","component/TodoStore.js","component/Task.js","component/TaskList.js","screen/HomePage.js","App.js","reportWebVitals.js","component/TimerStore.js","component/TimerView.js","index.js"],"names":["ButtonTestState","todoStore","arrayTask","title","content","status","makeAutoObservable","this","secondsPassed","task","push","id","splice","Task","PropTypes","string","number","func","props","className","class","onClick","removeTask","TaskList","console","log","test1","staff","nameList","information","useState","map","st","observer","saveValue","setSaveValue","type","onChange","e","target","value","addNewTask","item","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","myTimer","setInterval","increase","timer","reset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAoCeA,I,qCCYAC,EADG,I,WA5Bd,aAAe,yBAbfC,UAAY,CACR,CACIC,MAAO,cACPC,QAAS,YACTC,OAAQ,QAEZ,CACIF,MAAO,YACPC,QAAS,0BACTC,OAAQ,WAKZC,YAAmBC,M,uDAInBA,KAAKC,eAAiB,I,8BAItBD,KAAKC,cAAgB,I,iCAEdC,GACPF,KAAKL,UAAUQ,KAAKD,K,iCAEbE,GACPJ,KAAKL,UAAUU,OAAOD,EAAG,O,MCDlBE,GAzBDC,IAAUC,OACbD,IAAUE,OACJF,IAAUG,KAEd,SAACC,GAAD,OACT,qBAAKC,UAAU,gBAAf,SACQ,qBAAIA,UAAU,0BAAd,UACG,mCAAMD,EAAMf,MAAZ,OACA,qBAAKgB,UAAU,4BAAf,SACK,mBAAIC,MAAM,mBAAoBC,QAAS,kBAAMpB,EAAUqB,WAAW,eCIvEC,EAjBE,SAACL,GACdM,QAAQC,IAAIP,EAAMQ,OAClB,IAAMC,EAAQ,CACV,CAACC,SAAUV,EAAMQ,MAAQG,YAAY,eAAgBxB,OAAO,UAHxC,EAQUyB,mBAASH,GARnB,6BASxB,OACI,qBAAKR,UAAU,GAAf,SACMQ,EAAMI,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,CAAMJ,SAAUI,EAAGJ,SAAUC,YAAaG,EAAGH,oB,eC2B/CI,mBAnCf,WACI,IADgB,EAOkBH,mBAAS,IAP3B,mBAOTI,EAPS,KAOEC,EAPF,KAehB,OACE,gCACE,kDACA,uBAAOC,KAAK,OAAOC,SAAU,SAACC,GAAOd,QAAQC,IAAIa,EAAEC,OAAOC,OACzDL,EAAaG,EAAEC,OAAOC,UACvB,wBAAQnB,QAAS,kBAAMpB,EAAUwC,WAAY,CACrCtC,MAAO+B,EACP9B,QAAS,YACTC,OAAQ,UAHhB,wBAMA,wBAAQgB,QAAS,kBAAMpB,EAAUqB,WAAW,IAA5C,yBAIA,cAAC,EAAD,CAAUI,MAAOQ,IArBTjC,EAAUC,UAAU6B,KAAI,SAACW,EAAKC,GACnC,OAAO,cAAC,EAAD,eACKD,aCIRE,MAff,WAOI,OACA,qBAAKzB,UAAU,MAAf,SACG,cAAC,EAAD,OCLQ0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCYRQ,EAAU,I,WAbZ,aAAe,yBAFf9C,cAAgB,EAGZF,YAAmBC,M,uDAInBA,KAAKC,eAAiB,I,8BAItBD,KAAKC,cAAgB,M,MAK7B+C,aAAY,WACRD,EAAQE,aACT,KACYF,QCZArB,eARG,SAAC,GAAD,IAAGwB,EAAH,EAAGA,MAAH,OACd,sBAAKtC,UAAU,oBAAf,UACK,oDACA,yBAAQA,UAAU,oCAAoCE,QAAS,kBAAMoC,EAAMC,SAA3E,6BAAqGD,EAAMjD,uBCGpHmD,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWJ,MAAOH,OAEpBQ,SAASC,eAAe,SAM1BlB,K","file":"static/js/main.c8a2ca6e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../styles/style.scss\";\r\nimport InputText from './InputText.js';\r\nfunction ButtonTestState(props) {\r\n  const [count, setCount] = useState(0);\r\n  const [statusInputText, setStatusInputText] = useState(false);\r\n \r\n  //----------------------SHOW INPUT TEXT---------------------->>>>>>>>>>\r\n  \r\n  const showInputText = () => {\r\n    if (statusInputText) {\r\n       return (\r\n         <div>\r\n           <InputText />\r\n         </div>\r\n       )\r\n    } else {\r\n      \r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n        <h1>{count}</h1>\r\n      <button\r\n        onClick={() => {\r\n          setCount(count + 1);\r\n        }}\r\n      >\r\n        click\r\n      </button>\r\n      <p>{showInputText()}</p>\r\n    </div>\r\n  );\r\n \r\n}\r\n\r\nexport default ButtonTestState;\r\n","import React from \"react\"\r\nimport { makeAutoObservable } from \"mobx\"\r\nimport { observer } from \"mobx-react\"\r\n\r\n\r\nclass TodoStore {\r\n    arrayTask = [\r\n        {\r\n            title: 'Learn REACT',\r\n            content: 'hoc react',\r\n            status: 'done',\r\n        },\r\n        {\r\n            title: 'Learn PHP',\r\n            content: 'lam bai  react lay diem',\r\n            status: 'cancel',\r\n        },\r\n    ]\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    increase() {\r\n        this.secondsPassed += 1\r\n    }\r\n\r\n    reset() {\r\n        this.secondsPassed = 0\r\n    }\r\n    addNewTask(task) {\r\n        this.arrayTask.push(task);\r\n    }\r\n    removeTask(id) {\r\n        this.arrayTask.splice(id,1);\r\n        /*let index = 0\r\n        for (let todo of this.arrayTask) {\r\n            if (todo.id === id) {\r\n                break\r\n            } else {\r\n                index++\r\n            }\r\n        }*/\r\n        //delete element by.\r\n    }\r\n}\r\n\r\nconst todoStore = new TodoStore()\r\nexport default todoStore;\r\n","import React from \"react\";\r\nimport '../styles/style.scss';\r\nimport ButtonTestState from './ButtonTestState';\r\nimport InputText from './InputText.js';\r\nimport PropTypes from 'prop-types';\r\nimport todoStore from '../component/TodoStore.js'\r\n\r\nconst propTypesTask = {\r\n    nameList: PropTypes.string,\r\n    index: PropTypes.number,\r\n    updateData : PropTypes.func,\r\n}\r\nconst Task = (props) => (\r\n    <div className=\"containerList\">\r\n            <ul className=\"containerList__itemMobx\">\r\n               <li> {props.title} </li> \r\n               <div className=\"containerList__deleteIcon\">\r\n                    <i  class=\"far fa-trash-alt\"  onClick={() => todoStore.removeTask(0)}></i>\r\n               </div> \r\n            </ul>\r\n          \r\n        {/*<ul className=\"containerList__item\">\r\n            {/*}<li className=\"containerList__list\">{props.ts}</li>\r\n            <li className=\"containerList__list\">{props.ag}</li>\r\n            <li className=\"containerList__list\">Learn Javascript</li>\r\n            <li className=\"containerList__list\">Learn Python</li>*/}\r\n            {/*<li className=\"containerList__list\">{props.name}</li>\r\n        </ul>*/}\r\n    </div>\r\n)\r\nTask.propTypes = { \r\n    nameList: PropTypes.number\r\n}\r\nexport default Task;","\r\nimport React, { useState } from \"react\";\r\nimport Task from '../component/Task.js';\r\n\r\nconst TaskList = (props) => {\r\n    console.log(props.test1);\r\n    const staff = [\r\n        {nameList: props.test1 , information:'handsome boy', status:'false'},\r\n        /*{nameList:'David', information:'good person', status:'false'},\r\n        {nameList:'John', information:'bad person', status:'false'},\r\n        {nameList:'Comodo', information:'bad person', status:'false'},*/    \r\n    ]\r\n    const [staffList, setStaffList] = useState(staff);\r\n    return (\r\n        <div className=\"\">\r\n             {staff.map((st) => (\r\n                 <Task nameList={st.nameList} information={st.information}/>\r\n             ))}     \r\n        </div>\r\n    )   \r\n}\r\nexport default TaskList;","import React, { useState } from \"react\";\r\nimport '../styles/style.scss';\r\nimport TaskList from '../component/TaskList.js';\r\nimport InputText from '../component/InputText.js';\r\nimport ShowButton from '../component/showButton.js';\r\nimport Task from '../component/Task.js';\r\nimport { observer } from \"mobx-react\";\r\nimport todoStore from '../component/TodoStore.js'\r\nfunction HomePage() {\r\n    const testInformation = (value) => {\r\n        console.log('test123');\r\n        console.log(value);\r\n        setSaveValue(value);\r\n    };\r\n \r\n    const [saveValue, setSaveValue] = useState(\"\");\r\n    const renderTaskList = () => {\r\n         return todoStore.arrayTask.map((item,index) => {\r\n           return <Task \r\n                   {...item}  \r\n                  />\r\n         })\r\n    }\r\n    return (\r\n      <div>\r\n        <h2>WELCOME TO REACT</h2>\r\n        <input type=\"text\" onChange={(e) => {console.log(e.target.value)\r\n         setSaveValue(e.target.value)}}/>\r\n        <button onClick={() => todoStore.addNewTask( {\r\n                title: saveValue,\r\n                content: 'Learn PHP',\r\n                status: 'boom',\r\n        },)}> Add List </button>\r\n       \r\n        <button onClick={() => todoStore.removeTask(0)}>\r\n              Remove Item\r\n        </button>\r\n        {/*<InputText test1={testInformation}/>*/}\r\n        <TaskList test1={saveValue}/>\r\n        {renderTaskList()}\r\n      </div>\r\n    );\r\n}\r\nexport default observer(HomePage);","import './App.scss';\nimport TaskList from './component/TaskList.js';\nimport Task from './component/Task.js';\nimport InputText from './component/InputText.js';\nimport ButtonTestState from './component/ButtonTestState';\nimport './styles/style.scss'\nimport HomePage from './screen/HomePage.js';\n\nfunction App() {\n  /*render() {*/\n    const staff = [\n        {name:'Tommy', information:'handsome boy'},\n        {name:'David', information:'good person'},\n        {name:'John', information:'bad person'},\n    ]\n    return (\n    <div className=\"App\">\n       <HomePage />\n    </div>\n    );\n /* };*/\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\r\nimport { makeAutoObservable } from \"mobx\"\r\n\r\nclass Timer {\r\n    secondsPassed = 0\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    increase() {\r\n        this.secondsPassed += 1\r\n    }\r\n\r\n    reset() {\r\n        this.secondsPassed = 0\r\n    }\r\n}\r\n\r\nconst myTimer = new Timer()\r\nsetInterval(() => {\r\n    myTimer.increase()\r\n}, 1000)\r\nexport default myTimer;\r\n","import React from \"react\"\r\nimport { observer } from \"mobx-react\";\r\nimport '../styles/style.scss';\r\nconst TimerView = ({ timer }) => (\r\n    <div className=\"containerTestMobx\">\r\n         <h2>TEST MOBX IN REACT</h2>\r\n         <button className=\"containerTestMobx__buttonTestMobx\" onClick={() => timer.reset()}>Seconds passed: {timer.secondsPassed}</button>\r\n    </div>\r\n    \r\n)\r\n\r\nexport default observer(TimerView);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport myTimer from './component/TimerStore.js';\nimport TimerView from './component/TimerView.js';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <TimerView timer={myTimer} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}